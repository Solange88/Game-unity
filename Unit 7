
//scriptable objects

using Unity Engine;
[CreateAssetMenu] 

public class ID : ScriptableObject
{
public ID idObj;
}

//assetmenu

using UnityEngine; 

[CreateAssetMenu]

public class ColorID : ID
{
   public Color value = Color.red;
}

//matchbehaviour

using UnityEngine;
using UnityEngine.Events;

public class MatchBehaviour : MonoBehaviour
{
public ID idObj;
public UnityEvent matchEvent, noMatchEvent; 

private void OnTriggerEnter (Collider other) 
{
var tempObj = other.GetComponent<IDContainerBehaviour>();
if (tempObj == null)
   return;

var otherID = tempObj.idObj;
if (otherID == idObj)
{
 matchEvent.Invoke();
}
else 
{
  noMatchEvent.Invoke();
}
}
}

//sprite Behaviour

using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]

public class SpriteBehaviour : MonoBehaviour
{
   private Sprite Renderer rendererObj;

private void Start()
{
    rendererObj = GetComponent<SpriteRenderer>();
}

}

//containerbehaviour 

using UnityEngine; 
using UnityEngine.Events;

public class IDContainerBehaviour : MonoBehaviour 
{
public ID idObj;
public UnityEvent startEvent;

public void Start() 
{
   startEvent.Invoke();
}

}

//draggable behaviour

public class Draggable Behaviour : MonoBehaviour
{
   private Camera cameraObj;
   public bool draggable;
   public UnityEvent startDragEvent, endDragEvent;

void Start()
{
   cameraObj = Camera.main;
}

public IEnumerator OnMouseDown()
{
   offset = transform.postion - cameraObj.ScreenToWorldPoint(Input.mousrPosition);
   draggable = true;
   yield return new WaitForFixedUpdate();

while (draggable) 
{
   yield return new WaitForFixedUpdate();
   position = cameraObj.ScreenToViewportPoint(Input.mousePosition);
   transform.postion;
}

}

private void OnMouseUp()
{
   draggable = false;
}
}

//intData

using UnityEngine;

[CreateAssetMenu]

public class IntData : ScriptableObject 
{
   public int value;

   public void SetValue(int num) 
   {
      value = num; 
   }

public void CompareValue (IntData obj) 
{
    if (value >= obj.value)
    {
     
    }
    else
    {
       value = obj.value;
    }
}
public void SetValue(IntData obj)
{
value = obj.value;
}
}

//IdContainer

using UnityEngine;

[RequireComponent(typeof(SpriteRenderer))]

public class SpriteBehaviour : MonoBehaviour 
{
   private SpriteRenderer rendererObj;

   private void Start()
   {
     rendererObj = GetComponent<SpriteRenderer>();
   }

public void ChangeRendererColor(ColorID obj)
{
    rendererObj.color = obj.value;
}
}

//transform 

using UnityEngine; 

public class Transform Behaviour : MonoBehaviour
{
   public void ResetToZero()
{
   transform.position = Vector3.zero;
}
}
