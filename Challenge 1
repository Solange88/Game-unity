//movements
using UnityEngine; 

public class FirstPersonController : MonoBehaviour
{
public bool CanMove { get; private set; } = true;
private bool IsSprinting => canSprint && Input.GetKey(sprintKey); 
private bool ShouldJump => Input.GetKeyDown(jumpKey) && characterController.isGrounded; 
[Header("Functional Options")]
[SerializeField] private bool canSprint = true; 
[SerializdField] private bool canJump = true; 

[Header("Controls")] 
[SerializeField] private KeyCode sprintKey = KeyCode.LeftShift; 
[SerializeField] private KeyCode jumpKey = KeyCode.Space; 


[Header ("Movement Parameters")]
[SerializeField] private float walkSpeed = 3.0f;
[SerializeField] private float sprintSpeed = 6.0f;
[SerializeField] private float gravity = 30.0f;

[Header("Look Parameters")] 
[SerializeField, Range(1,10)] private float lookSpeedX = 2.0f;
[SerializeField, Range(1,10)] private float lookSpeedY = 2.0f;

[Header("Jump Parameters")] 
[SerializeField] private float jumpForce = 8.0f; 

private Camera playerCamera;
private CharacterController characterController;

private Vector3 moveDirection;
private Vector2 currentInput;

private float rotationX = 0;
void Awake()
{
playerCamera = GetComponentInChildren<Camera>();
characterController = GetComponent <CharacterController>(); 
Cursor.lockState = CursorLockMode.Locked;
Cursor.visible = false;
}
void Update()
{
      if (CanMove)
{ 
HandleMovementInput(); 
HandleMouseLook();
if(canJump)
    HandleJump(); 
ApplyFinalMovements();
}
}

private void HandleMovementInput()
{
currentInput = new Vector2((IsSprinting ? sprintSpeed : walkSpeed * Input.GetAxis("Vertical"), (IsSprinting ? sprintSpeed : walkSpeed) * Input.GetAxis("Horizontal"));
float moveDirectionY = movedirection.y;
moveDirection = (transform.TransformDirection(Vector3.forward) * currentInput.x) + (transform.TransformDirection(Vector3.right) * currentInput.y);
moveDirection.y = moveDirectionY; 
}

private void HandleMouseLook()
{
rotationX -= Input.GetAxis("Mouse Y") * lookspeedY;
rotationX = Mathf.Clamp (rotationX, -upperLookLimit, lowerLookLimit); 
playerCamera.transform.localRotation = Quaternion.Euler(rotationX, 0,0); 
transform.rotation *= Quaternion.Euler (0, Input.GetAxis (Mouse X") * lookSpeedX, 0);
}
private void HandleJump()
{
if(ShouldJump) 
   moveDirection.y = jumpForce; 
}

private void ApplyFinalMovements()
{
   if(!characterController.isGrounded) 
   moveDirection.y -= gravity * Time.deltaTime; 
characterController.Move(moveDirection * Time.deltaTime); 

}
}
