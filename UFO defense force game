using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class PlayerController : MonoBehaviour 
{
public float horizontalInput;

public float speed;

public float xRange; 

public Transform blaster; 

public GameObject laserbolt;


  void Update()
    {
       horizontalInput = Input.GetAxis("Horizontal"); 
       transform.Translate(Vector3.right * horizontalInput * Time.deltaTime * speed);

if (transform.position.x < -xRange)
{
transform.position = new Vector3(-xRange,transform.position.y, transform.position.z);
}

if (transform.position.x > xRange)
{
transform.position = new Vector3(xRange,transform.position.y, transform.position.z);
}
    if(Input.GetKeyDown(KeyCode.Space))
{
   Instantiate(laserBolt, blaster.transform.position, laserBolt.transform.rotation);
}

  } 
private void OnTriggerEnter(Collider other)
{
    Destroy(other.gameObject);
}
}
// move forwardscript

using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class MoveForward : MonoBehaviour
{
public float speed = 50.0f;


void Update ()
  {
    transform.Translate(Vector3.forward * Time.deltaTime * speed); 
  }
}

//destroyoutofbounds
using System.Collections;
using System.Collections.Generic;
using UnityEngine; 

public class DestroyOutOfBounds : MonoBehaviour
{
public float topBounds = 30.0f;
public float lowerBounds = -10.0f;


void Awake() 
{
Time.timeScale = 1; 
} 

void Update()
{
if(transform.position.z > topBounds)
{
Destroy(gameObject);
}
else if (transform.position.z < lowerBounds)
{
Debug.Log("Game Over!"); 
Destroy(gameObject);
Time.timeScale = 0;
}
}
}
//pick up item

using System.Collections;
using System.Collections.Generic;
using UnityEngine; 

public class PickUpController : MonoBehaviour
{
//detect collision or trigger with player and object
private void OnTriggerEnter(Collider other) 
{
   PlayerInventory playerInventory = other.GetComponent<PlayerInventory>();
   if (playerInventory != null)
{
playerInventory.ItemCollected();
gameObject.SetActive(false);
}

}
public void SpawnNextCircle()
{
Vector3 pos = center + new Vector3(Random.Range(-size.x / 2, size.c / 2),
                                   Random.Range(-size.y / 2, size.y / 2), 
                                    0);
//with destroy out of bounds script and moveforward script
                                      
}
}


//items 

using System.Collections;
using System.Collections.Generic;
using UnityEngine; 
 

public class InventoryUI : MonoBehaviour
{
   private TextMeshProUGUI itemText; 

void Start()
{
itemText = GetComponent<TextMeshProUGUI>();
}
public void UpdateItemText(PlayerInventory playerInventory)
{
   itemText.text = playerInventory.NumberOfItems.ToString();
}
}
//player inventory

using System.Collections;
using System.Collections.Generic;
using UnityEngine; 
using UnityEngine.Events;

public class PlayerInventory : MonoBehaviour 
{
public int NumberofItems { get; private set;} 

public UnityEvent<PlayerInventory> OnItemCollected;

public void ItemCollected()
{
NumberOfItems++; 
OnItemCollected.Invoke(this);
}
}


// Enemy spawn manager

using System.Collections; 
using System.Collections.Generic;
using UnityEngine;

public class EnemySpawnManager : MonoBehaviour
{
public GameObject [] ufoPrefabs;

private float spawnRangeX = 20f;

private float spawnPosZ = 20f;

void Update() 
{
    if(Input.GetKeyDown(KeyCode.Z))
    {
       Vector3 spawnPos = new Vector3(Random.Range(-spawnRangeX, spawnRangeX), 0,spawnPosZ);
       int ufoIndex = Random.Range(0,ufoPrefabs.Length);
       Instantiate(ufoPrefabs[ufoIndex], new Vector3(0,0,15), ufoPrefabs[ufoIndex].transform.rotation);
    }
}
}
// enemy collision trigger

using System.Collections; 
using System.Collections.Generic;
using UnityEngine; 

public class DetectCollision : MonoBehaviour 
{
void OnTriggerEnter(Collider other) 
{
   Destroy(other.gameObject);
   Destroy(other.gameObject); 

}
}
//score manager
using System.Collections;
using System.Collections.Generic;
usingUnityEngine;
using UnityEngine.UI;

public class Score : MonoBehaviour 
{
public static int scoreValue = 0;
   
void Start () 
{
   score = GetComponent<Text> ();
}
void Update () 
{
   score.text = "Score: " + scoreValue;
}
}
